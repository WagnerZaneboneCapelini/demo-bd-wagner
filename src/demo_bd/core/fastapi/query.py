"""Utility classes for FastAPI query parameter handling."""

import datetime as dt
from typing import Annotated

from fastapi import Depends, Query


class ApiQueryParams:
    """Query parameters for API authorization.

    Encapsulates the 'authorization' query parameter for FastAPI endpoints.
    """

    def __init__(
        self,
        authorization: str | None = Query(
            None,
            title="Chave",
            description="Chave de autorização, caso não esteja sendo enviada como header.",
        ),
    ):
        self.authorization = authorization


def get_api_query_params_dep():
    """
    Returns a dependency provider function for ApiQueryParams, suitable for use with FastAPI's Depends.
    This factory can be imported and reused in any router module.
    """

    def _dep(
        authorization: str = Query(
            None,
            title="Chave",
            description="Chave de autorização, caso não esteja sendo enviada como header.",
        ),
    ):
        return ApiQueryParams(authorization=authorization)

    return _dep


# Canonical dependency instance for use in route signatures
api_query_params_dep: ApiQueryParams = Depends(get_api_query_params_dep())


class ApiQueryKeySetPaginationParams:
    """Query parameters for keyset pagination.

    Encapsulates the 'start_from' and 'limit' query parameters for keyset-based pagination in FastAPI endpoints.
    """

    def __init__(
        self,
        start_from: str | None = Query(
            "",
            title="Start",
            description="Get records with ID great than this ID value. If not infomed starts from the 1'st record",
        ),
        limit: int | None = Query(100, title="Limit", description="How many records to return."),
    ):
        self.start_from = start_from
        self.limit = limit


class ApiQuerySkipSetPaginationParams:
    """Query parameters for skipset pagination.

    Encapsulates the 'skip', 'limit', and 'only_count' query parameters for skipset-based pagination in FastAPI endpoints.
    """

    def __init__(
        self,
        skip: int | None = Query(
            0,
            title="Skip",
            description="Skip N records using this value. If not infomed skips 0 records.",
            ge=0,
        ),
        limit: int | None = Query(
            5, title="Limit", description="How many records to return.", le=50
        ),
        only_count: bool | None = Query(
            None,
            title="Only Count",
            description="Return the count of records that will be generated by the query, regardless of pagination.",
        ),
    ):
        self.skip = skip
        self.limit = limit
        self.only_count = only_count


class ApiQueryDateRangeParams:
    """Query parameters for date range filtering.

    Encapsulates the 'from_date' and 'to_date' query parameters for filtering results by a date range in FastAPI endpoints.
    """

    def __init__(
        self,
        from_date: Annotated[dt.datetime, Query] | None = None,
        to_date: Annotated[dt.datetime, Query] | None = None,
    ):
        if from_date is None:
            from_date = Query(
                None,
                example="2024-04-01 00:00:00.000",
                title="Start Date",
                description="Start date of the query.",
            )
        if to_date is None:
            to_date = Query(
                None,
                example="2034-05-01 00:00:00.000",
                title="End Date",
                description="End date of the query.",
            )
        self.from_date = from_date
        self.to_date = to_date
